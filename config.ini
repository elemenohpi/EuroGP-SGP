debug = 0
# General
seed = 100  # random seed
runs = 2 # number of runs
output_level = info # debug / info
optimization_goal = max # max/min: aims to maximize/minimize the fitness value of the individuals
popsize = 100 # population size
tournament_size = 5
structural_mutation_rate = 0.3 # chance for adding or removing a program
lgp_mutation_rate = 0.6 # chance for programs to modify
crossover_rate = 1 # 1 means 100%
elitism = 1
jobs = 1 # ToDo:: This setting stopped working for unknown reasons
memory = False

# for the cost formula, you have access to the following variables: distance, max_distance, complexity, max_complexity
# and return_val
cost_formula = math.log(1+distance) + math.log(1+abs(return_val))

# regarding mutation of program locations
random_walk_step_size = 4

##########
make_viz_data = False
##########

conditional_return = 1 # needs explanation ToDo
conditional_return_depth = 1
return_mutation_rate_increase_handle = 0.6

#######################################################################################################################
# Model I/O
#######################################################################################################################

# Collections: Use name of the class file as the package name. Each class used should be provided as the value
# separated by a comma. e.g: loop_class_filename = OP_FOR, OP_WHILE, OP_DO_WHILE
math = OP_SUM, OP_DIV, OP_MULT, OP_MINUS # INDIVIDUAL OPs
if = OP_IF
end_program = OP_END
assign = OP_ASSIGN
ant = LEFT, RIGHT, MOVE, IF_SENSE
# conditionals are used the same way as inputs. an alternative method would be to introduce them in the inputs section.
# None is no conditional
# ToDo:: make config handle space between commas

conditionals = ==,>,<

# Input set: Use a dictionary with input names as the key and type as the value. ToDo:: constructing many input systems
# of a type can be done like the following: number_of_inputs type
# for example: 100 int means that the system will take a hundred inputs of type integer

inputs = {"x0" : "float", "x1" : "float", "x2" : "float", "x3" : "float", "x4" : "float", "x5" : "float", "x6" : "float", "x7" : "float", "x8" : "float", "x9" : "float", "x10" : "float", "x11" : "float"}

# Constants: I only support numeric values for the time being (might never change tbh) no space

constants = 1,2,3,4,5,6,7

# Operator set separated by comma
operators = math, assign, if

# Outputs:
# outputs = 0, 1, 2
# ToDo:: Fix for if output type is not in quotation
outputs = 0, 1, 2
# Registers: name[n] where n is the number of memory registers. Can be set to be the same as the number of inputs with
# their respective value

registers = a[13]

#######################################################################################################################
# Cue Individual
#######################################################################################################################
# ToDo:: Implement the ramped half and half algorithm
# Initialization values
cue_init_size_min = 2
cue_init_size_max = 8
cue_size_max = 16 # total number of programs



cue_init_lgp_size_min = 1
cue_init_lgp_size_max = 5
cue_lgp_size_max = 10 # total number of statements in lgp

# 2D space size. Bounds program locations in a radius
cue_init_radius = 10

# Spatial init type: How to initialize the position of program nodes? Multiple nodes having same pos (modular defection
# of the spatial properties), random, same init chance. circular, etc etc.
# ToDo:: This is not implemented
cue_spatial_init_type = random

# Output ratio: The ratio of selecting program nodes as output nodes. 0.2 = 20% chance
cue_output_ratio = 0.20

# Enable protected loops
cue_enable_loops = False
cue_self_loop = False
cue_revisit_penalty = 0.1
cue_max_evaluation_time = 200ms


# if set to true, input values change during the course of evolution
cue_dynamic_inputs = False

# Program generation type: Duplication with variation or random? (random / v_duplication)
# Duplication with variation is specially good for developing decision making
# ToDo:: This is not implemented
cue_program_generation_type = random

# cue_system: How to calculate the cost function of each node. Temporospatial considers distance of nodes as well as the
# number of statements in each program. Programmatical considers not only distance and time complexity, but mainly
# considers the return value of each function. (temporospatial / programmatical)
cue_system = programmatical


#######################################################################################################################
# GP Structure
#######################################################################################################################
individual = CueIndividual
population = BasePopulation
interpreter = BaseInterpreter
evolver = BaseEvolver
fitness = ToyProblems.ObstacleAvoidanceProblem

#######################################################################################################################
# Outputs
#######################################################################################################################

best_program = Output/best.py
best_object = Output/pickled_best_object.sgp
evo_file = Output/evo.csv